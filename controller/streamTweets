const request = require("request");

let timeout = 0;
let collected = [];

const streamURL = new URL(
    "https://api.twitter.com/2/tweets/search/stream?tweet.fields=context_annotations&expansions=author_id"
);

const authMessage = {
    title: "Could not authenticate",
    details: [
        `Please make sure your bearer token is correct`,
    ],
    type: "https://developer.twitter.com/en/docs/authentication",
};

const sleep = async (delay) => {
    return new Promise((resolve) => setTimeout(() => resolve(true), delay));
};

const initiateStream = async (req, res, next) => {
    console.log('------ initiating stream -------')
    res.render('tweeter', {
        rows: req.data,
        handle: req.userInfo.username
    })

    const response = streamTweets(req.app.get('io'), res);
}

const streamTweets = async (io, res) => {
    return io.on('connection', async (socket) => {
        console.log('A user connected');
        socket.emit('hello', { message: 'Hello from server!' })

        socket.on('disconnect', (reason) => {
            console.log('A user disconnected: ' + reason);
        });
        socket.on('client', (msg) => {
            console.log("Client: " + msg);
        })
        socket.on('server', (msg) => {
            console.log("Server: " + msg);
        })

        return makeCall(socket, res)
    });
};

const makeCall = (socket) => {

    if (!process.env.BEARER_TOKEN) {
        res.status(400).send("Error while authenticating call, please provide a valid bearer token");
    }

    const config = {
        url: streamURL,
        auth: {
            bearer: process.env.BEARER_TOKEN,
        },
        timeout: 31000,
    };

    try {
        const stream = request.get(config);

        console.log('requesting tweets stream...')
        stream
            .on("data", (data) => {
                try {
                    const json = JSON.parse(data);
                    if (json.connection_issue) {
                        socket.emit("error", json);
                        reconnect(stream, socket);
                    } else {
                        if (json.data) {

                            collected.push(json.data.text)
                            socket.emit("tweet", json.data.text);

                            return json.data.text;
                        } else {
                            socket.emit("authError", json);
                        }
                    }
                } catch (e) {
                    socket.emit("heartbeat");
                }
            })
            .on("error", (error) => {
                // Connection timed out
                socket.emit("error", error);
                reconnect(stream, socket);
            });
    } catch (e) {
        socket.emit("authError", authMessage);
    }
}


const reconnect = async (stream, socket) => {
    timeout++;
    stream.abort();
    await sleep(2 ** timeout * 1000);
    streamTweets(socket);
};

module.exports = { initiateStream };