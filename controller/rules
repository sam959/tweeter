const axios = require('axios')
const util = require('util')
const baseUrl = `https://api.twitter.com/2/tweets/search/stream/rules`;

const setRulesToBeDeleted = (username, rules) => {

    console.log(`There already are ${rules.length} rules set:`);
    Array.from(rules).forEach(e => console.log('\t' + e.value));
    const vals = Array.from(rules).map(e => e.value);

    if (vals.find(element => element.includes(username))) {
        return []
    }
    return rules.map(r => { r.id });
};

const setRules = (req, res, next) => {
    const username = req.query.handle;
    console.log(`setting rules to get tweets of user ${username}`);
    const token = process.env.BEARER_TOKEN;

    if (!token) {
        res.status(400).send("Error while authenticating call");
    }

    const requestConfig = {
        url: baseUrl,
        auth: {
            bearer: token,
        },
        data: {
            add: [
                { value: `from:${username}` }
            ]
        }
    };


    console.log(`sending request to set rulses`);

    const instance = axios.create({
        baseURL: requestConfig.url,
        // timeout: 1000,
        /*
        data: {
            add: [
                { value: `from:${username}` }
            ]
        },
        */
        headers: {
            'Authorization': 'Bearer ' + requestConfig.auth.bearer,
            'Content-type': 'application/json'
        }
    });

    instance.post(requestConfig.url, requestConfig.data)
        .then(function (response) {
            console.log(response.data);

            //res.send(response);
            next()

        })
        .catch(function (error) {
            console.log(error);
            res.send(JSON.stringify(error));
        });
};

const getRules = (req, res, next) => {
    const username = req.query.handle;

    if (!process.env.BEARER_TOKEN) {
        res.status(400).send("Error while authenticating call");
    }

    const requestConfig = {
        url: baseUrl,
        auth: {
            bearer: process.env.BEARER_TOKEN,
        }
    };

    const instance = axios.create({
        baseURL: requestConfig.url,
        headers: {
            'Authorization': 'Bearer ' + requestConfig.auth.bearer
        }
    });
    instance.get(requestConfig.url)
        .then(function (response) {
            req.toBeDeleted = setRulesToBeDeleted(username, response.data.data)
            next()
        })
        .catch(function (error) {
            console.log(error);
            res.send(error);
        });
}

const deleteRules = (req, res, next) => {

    const rules = req.toBeDeleted;

    if (rules && rules.length > 0) {
        const baseUrl = `https://api.twitter.com/2/tweets/search/stream/rules`;
        console.log(`deleting ${rules.length} rules`);
        const token = process.env.BEARER_TOKEN;
        if (!token) {
            res.status(400).send("Error while authenticating call");
        }

        console.log(`sending request to set rules`);

        const requestConfig = {
            url: baseUrl,
            auth: {
                bearer: token,
            },
            data: {
                delete: {
                    ids: rules,
                },
            }
        };

        console.log(`sending request to delete rulses`);

        const instance = axios.create({
            baseURL: requestConfig.url,
            headers: {
                'Authorization': 'Bearer ' + requestConfig.auth.bearer
            }
        });

        instance.post(requestConfig.url, requestConfig.data)
            .then(function (response) {
                console.log(response.data);
                next()
            })
            .catch(function (error) {
                console.log(error);
                res.send(JSON.stringify(error));
            });
    }
    console.log(`no rules to delete`);
    next()
};

module.exports = {
    setRules,
    getRules,
    deleteRules
}