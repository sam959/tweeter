#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('tweeter:server');
var streamTweets = require('../controller/test')
/**
 * Create HTTP server.
 */
var server = require('http').createServer(app);
require('dotenv').config()
const io =  require('socket.io')(server);

const { log } = require('console');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '7070');
app.set('port', port);

app.set('io', io);

//Whenever someone connects this gets executed

io.on('connection', async (socket)  => {
  log('A user connected');
  streamTweets(io);
  socket.emit('hello', {message: 'Hello from server!'})
  //socket.emit("hello", "world");

  socket.on('disconnect', (reason) => {
     console.log('A user disconnected: ' + reason);
  });
  socket.on('client', (msg) => {
    log("Client: " + msg);
  })
  socket.on('server', (msg) => {
    log("Server: " + msg);
  })
  socket.on('tweet', (msg) => {
    log("Tweet: " + msg);
  })
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  log('Listening on ' + addr.port);
}